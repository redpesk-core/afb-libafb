/*
 * Copyright (C) 2015-2022 IoT.bzh Company
 * Author: Jos√© Bollo <jose.bollo@iot.bzh>
 *
 * $RP_BEGIN_LICENSE$
 * Commercial License Usage
 *  Licensees holding valid commercial IoT.bzh licenses may use this file in
 *  accordance with the commercial license agreement provided with the
 *  Software or, alternatively, in accordance with the terms contained in
 *  a written agreement between you and The IoT.bzh Company. For licensing terms
 *  and conditions see https://www.iot.bzh/terms-conditions. For further
 *  information use the contact form at https://www.iot.bzh/contact.
 *
 * GNU General Public License Usage
 *  Alternatively, this file may be used under the terms of the GNU General
 *  Public license version 3. This license is as published by the Free Software
 *  Foundation and appearing in the file LICENSE.GPLv3 included in the packaging
 *  of this file. Please review the following information to ensure the GNU
 *  General Public License requirements will be met
 *  https://www.gnu.org/licenses/gpl-3.0.html.
 * $RP_END_LICENSE$
 */

#pragma once

#include <json-c/json.h>

/**
 * Extract the json object of the file given by 'filename' and put it in *jso.
 * In the same time, tag the created object with their line in the file
 * in a such way that the function @see json_locator_locate is able to
 * return a valid indication
 *
 * @param jso      where to put the result if return is 0
 * @param filename the file to be loaded
 *
 * @return 0 in case of success or the negative value of detected errno
 */
extern int json_locator_from_file(struct json_object **jso, const char *filename);

/**
 * Returns the location if available of the json object jso.
 * The location is possible only if the object jso was generated by
 * th function @see json_locator_from_file
 *
 * @param jso the json object to locate
 * @param linenum the pointer for storing, if not NULL, the line number
 *
 * @return the file of the object if any or NULL if not found
 */
extern const char *json_locator_locate(struct json_object *jso, unsigned *linenum);

/**
 * Copies, if it exists, the locator of the object 'from' to the object 'to'
 *
 * @param from the from object
 * @param to   the to object
 */
extern void json_locator_copy(struct json_object *from, struct json_object *to);

/**
 * Computes the path location of jso within root. The returned path is a string
 * that must be freed by the caller. NULL is returned if jso is not part of root.
 *
 * @param root the root object possibly containing jso
 * @param jso the object whose path within root is queried
 *
 * @return NULL if jso is not part of root or a string that must be freed using 'free'
 */
extern char *json_locator_search_path(struct json_object *root, struct json_object *jso);
